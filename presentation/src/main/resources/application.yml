############ 服务端口设置  ############
server:
  port: 8080
  max-http-header-size: 10MB

############ Mapper设置  ############
#下面这些内容是为了让MyBatis映射
#指定Mybatis的Mapper文件
mybatis:
  mapper-locations: mappers/*xml
  #指定Mybatis的实体目录
  type-aliases-package: org.knight.infrastructure.dao.domain

############ MYSQL DB 设置  ############
#spring:
#  datasource:
#    url: jdbc:mysql://localhost:3306/open_nft??&characterEncoding=utf-8&autoReconnect=true
#    username: root
#    password: liya4537
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    # 连接池相关配置
#    hikari:
#      maximum-pool-size: 20 # 最大连接数，根据用户量和数据请求量进行调整
#      minimum-idle: 5 # 最小空闲连接数，保持一定数量的空闲连接以减少创建连接的开销
#      idle-timeout: 60000 # 连接空闲超时时间，单位为毫秒，超过该时间的空闲连接将被释放
#      max-lifetime: 1800000 # 连接的最大生存时间，单位为毫秒，超过该时间的连接将被释放


spring:
  ############ 定时Task设置  ############
  task:
    scheduling:
      enabled: true
  ############ Mariadb DB 或 Mysql 设置  ############
  datasource:
    url: jdbc:mysql://103.108.67.140:3306/open_nft?&characterEncoding=utf-8&autoReconnect=true
    username: root
    password: pipinstall
    driver-class-name: com.mysql.cj.jdbc.Driver  # org.mariadb.jdbc.Driver
    # 连接池相关配置
    hikari:
      maximum-pool-size: 20 # 最大连接数，根据用户量和数据请求量进行调整
      minimum-idle: 5 # 最小空闲连接数，保持一定数量的空闲连接以减少创建连接的开销
      idle-timeout: 60000 # 连接空闲超时时间，单位为毫秒，超过该时间的空闲连接将被释放
      max-lifetime: 1800000 # 连接的最大生存时间，单位为毫秒，超过该时间的连接将被释放

  profilers:
    active: dev

############## 区块链配置 #############
fisco:
  certPath: conf
  deployPublicKey: 2136414ec16e49a82adf646e7b7d6a150602b0d3887aa905bdd4430fecfa71014c9f3e49548260baf2b58b1f8dea79663be416caac017983971d7d6f50705f4d
  deployPrivateKey: 1ffd8dd75f2278dfd9171ac5194720ec9a1a1f76b661d5e37ce5bcabfdf26975
  ownableContractAddress: 0xef6fae3b7b82a950c048e3d40ed0bbaa76445b8e
  utilsContractAddress: 0xf49a08ce951c91d646f64906815df655ada5a433
  bcosUserContractAddress: 0xfadd46d5b4907ebe2d8940de3340478a14736d54
  bcosNFTContractAddress: 0xd8991cad446de38c6a97b8c9f4572255aa61b6b9
  #  maxBlockingQueueSize: 102400
  #  peers:
  #        - 43.143.86.190:20200
  #        - 43.143.86.190:20201
  # 区块链节点地址
  #  node-url: http://43.143.86.190:8545
  # 合约调用者地址
  #  contract-address: 0x5FbDB2315678afecb367f032d93F642f64180aa3
  # 区块链合约ABI
  #  contract-abi: [{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint256","name":"x","type":"uint256"}],"name":"set","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"get","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]


  ############## Graceful Response 配置 ##############
  # Spring配套响应配置
  mvc:
    throw-exception-if-no-handler-found: true
  web:
    resources:
      add-mappings: true


graceful-response:
  response-style: 1
  exclude-packages:
    - com.github.xiaoymin.**
    - springfox.**
    - io.swagger.**
    - org.springdoc.**
  # 自定义的成功响应码，不配置则为0
  default-success-code: 200
  # 自定义的成功提示，默认为ok
  default-success-msg: successful
  # 自定义的失败响应码，默认为1
  default-error-code: 500
  # 自定义的失败提示，默认为error
  default-error-msg: error
  # 设置是否将原生异常错误信息detailMessage字段填充到Response的msg中
  # 此设置可以用于捕获异常自定义返回信息，但是会暴露系统内部异常信息
  # 默认为false，即不打开
  origin-exception-using-detail-message: true
  # 是否打印异常日志，默认为false
  print-exception-in-global-advice: true


############## SpringDoc 配置 ##############
# SpringDoc 默认API文档:
# http://localhost:8080/doc.html
springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    tags-sorter: alpha
  group-configs:
    - group: user
      display-name: "user接口文档"
      paths-to-match: '/**'
      packages-to-scan: org.knight.presentation.member
    - group: admin
      display-name: "admin接口文档"
      paths-to-match: '/**'
      packages-to-scan: org.knight.presentation.admin
    - group: common
      display-name: "common接口文档"
      paths-to-match: '/**'
      packages-to-scan: org.knight.presentation.common.controller
  default-flat-param-object: true
knife4j:
  # 开启增强配置
  enable: true
  #   开启生产环境屏蔽（如果是生产环境，需要把下面配置设置true）
  #  production: true
  setting:
    language: zh_cn
    swagger-model-name: 实体类列表
  basic: # 开始授权认证
    enable: false
    username: admin
    password: 123456


############ Sa-Token配置  ############
sa-token:
  # token前缀
  # Token前缀 与 Token值 之间必须有一个空格。
  # 一旦配置了 Token前缀，则前端提交 Token 时，必须带有前缀，否则会导致框架无法读取 Token。
  # 由于Cookie中无法存储空格字符，也就意味配置 Token 前缀后，Cookie 鉴权方式将会失效，此时只能将 Token 提交到header里进行传输
  # token-prefix: Bearer
  # token 名称 (同时也是cookie名称)
  token-name: satoken
  # token 有效期，单位s 默认30天, -1代表永不过期
  timeout: 2592000
  # token 临时有效期 (指定时间内无操作就视为token过期) 单位: 秒
  #  activity-timeout: -1
  # 是否允许同一账号并发登录 (为true时允许一起登录, 为false时新登录挤掉旧登录)
  is-concurrent: true
  # 在多人登录同一账号时，是否共用一个token (为true时所有登录共用一个token, 为false时每次登录新建一个token)
  is-share: false
  # token风格
  token-style: uuid
  # 是否输出操作日志
  is-log: true
  # 配置 Sa-Token 单独使用的 Redis 连接
########## Sa-Token 单独使用的 Redis 连接配置 ##########
########## 若不需要集成redis 则下述配置可取消 ##########
#  alone-redis:
#    # Redis数据库索引（默认为0）
#    database: 0
#    # Redis服务器地址
#    host: 127.0.0.1
#    # Redis服务器连接端口
#    port: 6379
#    # Redis服务器连接密码（默认为空）
#    password:
#    # 连接超时时间
#    timeout: 10s
#spring:
#  # 配置业务使用的 Redis 连接
#  redis:
#    # Redis数据库索引（默认为0）
#    database: 1
#    # Redis服务器地址
#    host: 127.0.0.1
#    # Redis服务器连接端口
#    port: 6379
#    # Redis服务器连接密码（默认为空）
#    password:
#    # 连接超时时间
#    timeout: 10s



