package org.knight.infrastructure.fisco.service;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class BcosNFT extends Contract {
    public static final String[] BINARY_ARRAY = {"6080604052600060015534801561001557600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612fa0806100656000396000f3006080604052600436106100f0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680624cf74d146100f557806307d1e848146101725780630ec13c6b1461024b5780632bb3b114146103375780632ce74fc91461038e57806337a56b36146103fb578063576f7ea714610482578063681dab56146105955780639036c0501461061257806394116d461461065f578063b25503171461068a578063ca8f3bfc146106cb578063ccdfd17c14610789578063d1c70c7b146107ca578063d5395c3b146108c1578063deaea2e314610967578063ed91dcda146109d4575b600080fd5b34801561010157600080fd5b5061015c600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610a7a565b6040518082815260200191505060405180910390f35b34801561017e57600080fd5b50610249600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050610aef565b005b34801561025757600080fd5b506102bc600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050610eb2565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102fc5780820151818401526020810190506102e1565b50505050905090810190601f1680156103295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561034357600080fd5b5061034c610f31565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561039a57600080fd5b506103b960048036038101908080359060200190929190505050610f56565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561040757600080fd5b5061046c600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919050505061107c565b6040518082815260200191505060405180910390f35b34801561048e57600080fd5b506104ad600480360381019080803590602001909291905050506110fb565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561055757808201518184015260208101905061053c565b50505050905090810190601f1680156105845780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b3480156105a157600080fd5b506105fc600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061132e565b6040518082815260200191505060405180910390f35b34801561061e57600080fd5b5061065d60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116d3565b005b34801561066b57600080fd5b50610674611b4c565b6040518082815260200191505060405180910390f35b34801561069657600080fd5b506106b560048036038101908080359060200190929190505050611bfa565b6040518082815260200191505060405180910390f35b3480156106d757600080fd5b50610732600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611d00565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561077557808201518184015260208101905061075a565b505050509050019250505060405180910390f35b34801561079557600080fd5b506107b460048036038101908080359060200190929190505050612109565b6040518082815260200191505060405180910390f35b3480156107d657600080fd5b506108ab600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291908035906020019092919050505061220f565b6040518082815260200191505060405180910390f35b3480156108cd57600080fd5b506108ec60048036038101908080359060200190929190505050612721565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561092c578082015181840152602081019050610911565b50505050905090810190601f1680156109595780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561097357600080fd5b50610992600480360381019080803590602001909291905050506128c0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109e057600080fd5b506109ff600480360381019080803590602001909291905050506129e6565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a3f578082015181840152602081019050610a24565b50505050905090810190601f168015610a6c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60006004826040518082805190602001908083835b602083101515610ab45780518252602082019150602081019050602083039250610a8f565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020549050919050565b6060600080610afc612e65565b610b04612b85565b869350600092505b84831015610ea857610b1c611b4c565b915060e0604051908101604052808973ffffffffffffffffffffffffffffffffffffffff1681526020016000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001888152602001878152602001838152602001848152602001868152509050816004876040518082805190602001908083835b602083101515610bda5780518252602082019150602081019050602083039250610bb5565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902081905550806002600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002019080519060200190610ccf929190612ecf565b506060820151816003019080519060200190610cec929190612ecf565b506080820151816004015560a0820151816005015560c08201518160060155905050600660008154809291906001019190505550816003610d308660018701610eb2565b6040518082805190602001908083835b602083101515610d655780518252602082019150602081019050602083039250610d40565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16837f547190b67ea302d38eda75c584efc860194c84966d2f7164452cef488895de628a600188018a6040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610e5f578082015181840152602081019050610e44565b50505050905090810190601f168015610e8c5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a48280600101935050610b0c565b5050505050505050565b606082826040516020018083805190602001908083835b602083101515610eee5780518252602082019150602081019050602083039250610ec9565b6001836020036101000a03801982511681845116808217855250505050505090500182815260200192505050604051602081830303815290604052905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008082118015610fca5750600073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060000160009054906101000a90","","","63d8080029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","50565b606082826040516020018083805190602001908083835b602083101515610fd95780518252602082019150602081019050602083039250610fb4565b6001836020036101000a03801982511681845116808217855250505050505090500182815260200192505050604051602081830303815290604052905092915050565b600080821180156110905750600073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1515611104576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f496e76616c696420746f6b656e2049440000000000000000000000000000000081525060200191505060405180910390fd5b60026000838152602001908152602001600020600501549050919050565b6000804260015460405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515611184578051825260208201915060208101905060208303925061115f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206001900490506001600081548092919060010191905055508091505090565b6000806060600080851180156112495750600073ffffffffffffffffffffffffffffffffffffffff166002600087815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15156112bd576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f496e76616c696420746f6b656e2049440000000000000000000000000000000081525060200191505060405180910390fd5b6002600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260008881526020019081526020016000206002016002600089815260200190815260200160002060040154818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113ed5780601f106113c2576101008083540402835291602001916113ed565b820191906000526020600020905b8154815290600101906020018083116113d057829003601f168201915b5050505050915093509350935093509193509193565b600080821180156114775750600073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15156114eb576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f496e76616c696420746f6b656e2049440000000000000000000000000000000081525060200191505060405180910390fd5b60026000838152602001908152602001600020600601549050919050565b606060008211801561157e5750600073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15156115f2576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f496e76616c696420746f6b656e2049440000000000000000000000000000000081525060200191505060405180910390fd5b600260008381526020019081526020016000206003018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561169c5780601f106116715761010080835404028352916020019161169c565b820191906000526020600020905b81548152906001019060200180831161167f57829003601f168201915b50505050509050919050565b600082600081111515611723576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f496e76616c696420746f6b656e2049440000000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156117fe576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f546f6b656e20646f6573206e6f7420657869737400000000000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061189957503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611933576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f596f7520617265206e6f7420617070726f766564206f7220746865206f776e6581526020017f72206f66207468697320746f6b656e000000000000000000000000000000000081525060400191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166002600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611a32576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f596f7520617265206e6f7420746865206f776e6572206f66207468697320746f81526020017f6b656e000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6002600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150826002600086815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16857fdc1e0b6eeb7f441d83b576d3149b301c6d3726749b8fe9f07f268467054fdb7060405160405180910390a450505050565b60008082118015611b955750600073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1515611c09576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f496e76616c696420746f6b656e2049440000000000000000000000000000000081525060200191505060405180910390fd5b6002600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6060600082118015611cbc5750600073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1515611d30576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f496e76616c696420746f6b656e2049440000000000000000000000000000000081525060200191505060405180910390fd5b600260008381526020019081526020016000206002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611dda5780601f10611daf57610100808354040283529160200191611dda565b820191906000526020600020905b815481529060010190602001808311611dbd57829003601f168201915b50505050509050919050565b6060600080611df3612e66565b611dfb612b86565b869350600092505b8483101561219f57611e13611122565b915060e0604051908101604052808973ffffffffffffffffffffffffffffffffffffffff1681526020016000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001888152602001878152602001838152602001848152602001868152509050816004876040518082805190602001908083835b602083101515611ed15780518252602082019150602081019050602083039250611eac565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902081905550806002600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffff","","e143c8080029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"getTokenIdByTokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"creatorAddress\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"baseURI\",\"type\":\"string\"},{\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"createNFT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"generateKey\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getNFTCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"serialNumber\",\"type\":\"uint256\"}],\"name\":\"getTokenIdByNameAndSerialNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getNFT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"input\",\"type\":\"string\"}],\"name\":\"stringToUniqueUint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferNFT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"generateID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getNFTSerialNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getTokenIdsByName\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getNFTQuantity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"creatorAddress\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"baseURI\",\"type\":\"string\"},{\"name\":\"serialNumber\",\"type\":\"uint256\"},{\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"createNFT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getNFTTokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getNFTOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getNFTName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"serialNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"NFTCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"NFTtransfer\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETTOKENIDBYTOKENURI = "getTokenIdByTokenURI";

    public static final String FUNC_CREATENFT = "createNFT";

    public static final String FUNC_GENERATEKEY = "generateKey";

    public static final String FUNC__CONTRACTOWNER = "_contractOwner";

    public static final String FUNC_GETNFTCREATOR = "getNFTCreator";

    public static final String FUNC_GETTOKENIDBYNAMEANDSERIALNUMBER = "getTokenIdByNameAndSerialNumber";

    public static final String FUNC_GETNFT = "getNFT";

    public static final String FUNC_STRINGTOUNIQUEUINT = "stringToUniqueUint";

    public static final String FUNC_TRANSFERNFT = "transferNFT";

    public static final String FUNC_GENERATEID = "generateID";

    public static final String FUNC_GETNFTSERIALNUMBER = "getNFTSerialNumber";

    public static final String FUNC_GETTOKENIDSBYNAME = "getTokenIdsByName";

    public static final String FUNC_GETNFTQUANTITY = "getNFTQuantity";

    public static final String FUNC_GETNFTTOKENURI = "getNFTTokenURI";

    public static final String FUNC_GETNFTOWNER = "getNFTOwner";

    public static final String FUNC_GETNFTNAME = "getNFTName";

    public static final Event NFTCREATED_EVENT = new Event("NFTCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event NFTTRANSFER_EVENT = new Event("NFTtransfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected BcosNFT(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public BigInteger getTokenIdByTokenURI(String _tokenURI) throws ContractException {
        final Function function = new Function(FUNC_GETTOKENIDBYTOKENURI, 
                Arrays.<Type>asList(new Utf8String(_tokenURI)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt createNFT(String creatorAddress, String _name, String baseURI, BigInteger quantity) {
        final Function function = new Function(
                FUNC_CREATENFT, 
                Arrays.<Type>asList(new Address(creatorAddress),
                new Utf8String(_name),
                new Utf8String(baseURI),
                new Uint256(quantity)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createNFT(String creatorAddress, String _name, String baseURI, BigInteger quantity, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATENFT, 
                Arrays.<Type>asList(new Address(creatorAddress),
                new Utf8String(_name),
                new Utf8String(baseURI),
                new Uint256(quantity)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateNFT(String creatorAddress, String _name, String baseURI, BigInteger quantity) {
        final Function function = new Function(
                FUNC_CREATENFT, 
                Arrays.<Type>asList(new Address(creatorAddress),
                new Utf8String(_name),
                new Utf8String(baseURI),
                new Uint256(quantity)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, BigInteger> getCreateNFTAddressStringStringUint256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATENFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public String generateKey(String key, BigInteger num) throws ContractException {
        final Function function = new Function(FUNC_GENERATEKEY, 
                Arrays.<Type>asList(new Utf8String(key),
                new Uint256(num)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String _contractOwner() throws ContractException {
        final Function function = new Function(FUNC__CONTRACTOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getNFTCreator(BigInteger _tokenId) throws ContractException {
        final Function function = new Function(FUNC_GETNFTCREATOR, 
                Arrays.<Type>asList(new Uint256(_tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getTokenIdByNameAndSerialNumber(String _name, BigInteger serialNumber) throws ContractException {
        final Function function = new Function(FUNC_GETTOKENIDBYNAMEANDSERIALNUMBER, 
                Arrays.<Type>asList(new Utf8String(_name),
                new Uint256(serialNumber)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple4<String, String, String, BigInteger> getNFT(BigInteger _tokenId) throws ContractException {
        final Function function = new Function(FUNC_GETNFT, 
                Arrays.<Type>asList(new Uint256(_tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<String, String, String, BigInteger>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue());
    }

    public TransactionReceipt stringToUniqueUint(String input) {
        final Function function = new Function(
                FUNC_STRINGTOUNIQUEUINT, 
                Arrays.<Type>asList(new Utf8String(input)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] stringToUniqueUint(String input, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_STRINGTOUNIQUEUINT, 
                Arrays.<Type>asList(new Utf8String(input)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForStringToUniqueUint(String input) {
        final Function function = new Function(
                FUNC_STRINGTOUNIQUEUINT, 
                Arrays.<Type>asList(new Utf8String(input)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getStringToUniqueUintInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_STRINGTOUNIQUEUINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getStringToUniqueUintOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_STRINGTOUNIQUEUINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt transferNFT(BigInteger _tokenId, String _to) {
        final Function function = new Function(
                FUNC_TRANSFERNFT, 
                Arrays.<Type>asList(new Uint256(_tokenId),
                new Address(_to)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] transferNFT(BigInteger _tokenId, String _to, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERNFT, 
                Arrays.<Type>asList(new Uint256(_tokenId),
                new Address(_to)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransferNFT(BigInteger _tokenId, String _to) {
        final Function function = new Function(
                FUNC_TRANSFERNFT, 
                Arrays.<Type>asList(new Uint256(_tokenId),
                new Address(_to)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, String> getTransferNFTInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFERNFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt generateID() {
        final Function function = new Function(
                FUNC_GENERATEID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] generateID(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GENERATEID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGenerateID() {
        final Function function = new Function(
                FUNC_GENERATEID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getGenerateIDOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GENERATEID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getNFTSerialNumber(BigInteger _tokenId) throws ContractException {
        final Function function = new Function(FUNC_GETNFTSERIALNUMBER, 
                Arrays.<Type>asList(new Uint256(_tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List getTokenIdsByName(String _name) throws ContractException {
        final Function function = new Function(FUNC_GETTOKENIDSBYNAME, 
                Arrays.<Type>asList(new Utf8String(_name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public BigInteger getNFTQuantity(BigInteger _tokenId) throws ContractException {
        final Function function = new Function(FUNC_GETNFTQUANTITY, 
                Arrays.<Type>asList(new Uint256(_tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt createNFT(String creatorAddress, String _name, String baseURI, BigInteger serialNumber, BigInteger quantity) {
        final Function function = new Function(
                FUNC_CREATENFT, 
                Arrays.<Type>asList(new Address(creatorAddress),
                new Utf8String(_name),
                new Utf8String(baseURI),
                new Uint256(serialNumber),
                new Uint256(quantity)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createNFT(String creatorAddress, String _name, String baseURI, BigInteger serialNumber, BigInteger quantity, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATENFT, 
                Arrays.<Type>asList(new Address(creatorAddress),
                new Utf8String(_name),
                new Utf8String(baseURI),
                new Uint256(serialNumber),
                new Uint256(quantity)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateNFT(String creatorAddress, String _name, String baseURI, BigInteger serialNumber, BigInteger quantity) {
        final Function function = new Function(
                FUNC_CREATENFT, 
                Arrays.<Type>asList(new Address(creatorAddress),
                new Utf8String(_name),
                new Utf8String(baseURI),
                new Uint256(serialNumber),
                new Uint256(quantity)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, String, BigInteger, BigInteger> getCreateNFTAddressStringStringUint256Uint256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATENFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue()
                );
    }

    public Tuple1<BigInteger> getCreateNFTAddressStringStringUint256Uint256Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATENFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public String getNFTTokenURI(BigInteger _tokenId) throws ContractException {
        final Function function = new Function(FUNC_GETNFTTOKENURI, 
                Arrays.<Type>asList(new Uint256(_tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getNFTOwner(BigInteger _tokenId) throws ContractException {
        final Function function = new Function(FUNC_GETNFTOWNER, 
                Arrays.<Type>asList(new Uint256(_tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getNFTName(BigInteger _tokenId) throws ContractException {
        final Function function = new Function(FUNC_GETNFTNAME, 
                Arrays.<Type>asList(new Uint256(_tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List<NFTCreatedEventResponse> getNFTCreatedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NFTCREATED_EVENT, transactionReceipt);
        ArrayList<NFTCreatedEventResponse> responses = new ArrayList<NFTCreatedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NFTCreatedEventResponse typedResponse = new NFTCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.creator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.serialNumber = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.quantity = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeNFTCreatedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(NFTCREATED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeNFTCreatedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(NFTCREATED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<NFTtransferEventResponse> getNFTtransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NFTTRANSFER_EVENT, transactionReceipt);
        ArrayList<NFTtransferEventResponse> responses = new ArrayList<NFTtransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NFTtransferEventResponse typedResponse = new NFTtransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeNFTtransferEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(NFTTRANSFER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeNFTtransferEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(NFTTRANSFER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static BcosNFT load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new BcosNFT(contractAddress, client, credential);
    }

    public static BcosNFT deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(BcosNFT.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class NFTCreatedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger tokenId;

        public String creator;

        public String owner;

        public String name;

        public BigInteger serialNumber;

        public BigInteger quantity;
    }

    public static class NFTtransferEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger tokenId;

        public String from;

        public String to;
    }
}
